name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.24'
        check-latest: true

    - name: Build
      run: |
        go build -ldflags "-X main.Version=dev -X main.commit=${{ github.sha }} -X main.date=$(date -u +'%Y-%m-%d_%H:%M:%S')" -v ./...

    - name: Test
      run: go test -v ./...

    - name: Run linter
      run: |
        go install golang.org/x/lint/golint@latest
        golint ./...

    - name: Check formatting
      run: go fmt ./...

    - name: Run security scan
      run: |
        go install github.com/securego/gosec/v2/cmd/gosec@latest
        gosec ./...

    - name: Check dependencies
      run: |
        go install github.com/golangci/golangci-lint/cmd/golangci-lint@latest
        golangci-lint run

  cross-platform-build:
    needs: build-and-test
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        go-version: ['1.21']
    runs-on: ${{ matrix.os }}
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ matrix.go-version }}
        check-latest: true

    - name: Build
      shell: pwsh
      run: |
        $env:GOOS = if (${{ matrix.os }} -eq 'ubuntu-latest') { 'linux' } elseif (${{ matrix.os }} -eq 'windows-latest') { 'windows' } else { 'darwin' }
        $env:GOARCH = 'amd64'
        go build -ldflags "-X main.Version=dev -X main.commit=${{ github.sha }} -X main.date=$(Get-Date -Format 'yyyy-MM-dd_HH:mm:ss')" -v ./...

    - name: Test
      run: go test -v ./... 